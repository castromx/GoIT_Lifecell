from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from database import get_tariffs_family, get_tariffs_unlimited, get_tariff_gb, get_tariff_call, get_tariff_any
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from number import number_check

bot = Bot(token="TOKEN_BOT")
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

main = ReplyKeyboardMarkup(resize_keyboard=True)
main.add('–î–ª—è —Å–µ–±–µ').add("–î–ª—è —Å—ñ–º'—ó")

for_me = ReplyKeyboardMarkup(resize_keyboard=True)
for_me.add('–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç').add("–î–∑–≤—ñ–Ω–∫–∏").add('–ù–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤').add('–î–æ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ —Ç–∞—Ä–∏—Ñ—ñ–≤')

internet = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
internet.add('–ë–µ–∑–ª—ñ–º', '40 –ì–ë').add('25 –ì–ë', '8 –ì–ë').add('7 –ì–ë', '–î–æ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ —Ç–∞—Ä–∏—Ñ—ñ–≤')


start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏')

class NumberCheck(StatesGroup):
    GET_NUMBER = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–±–µ–∑ +38):")
    await NumberCheck.GET_NUMBER.set()


@dp.message_handler(state=NumberCheck.GET_NUMBER)
async def input_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['GET_NUMBER'] = message.text
        nums = data['GET_NUMBER']
        response = number_check(nums)
        if response == "–û–∫–µ–π, –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ":
            await message.reply(response, reply_markup=start_kb)
        else:
            register_kb = ReplyKeyboardMarkup(resize_keyboard=True)
            register_kb.add('–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä')
            await message.reply(response, reply_markup=register_kb)
    await state.finish()

@dp.message_handler(text=['–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä'])
async def cmd_start(message: types.Message):
    await message.reply("–ü–µ—Ä–µ–Ω–µ—Å—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä –Ω–∞ —Å–∞–π—Ç—ñ: https://mnp.lifecell.ua/uk/mnp/ \n–æ–ø—ñ—Å–ª—è –≤–≤–µ–¥—ñ—Ç—å –∫–æ–ºa–Ω–¥—É /start")

@dp.message_handler(lambda message: '–î–æ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ —Ç–∞—Ä–∏—Ñ—ñ–≤' in message.text or '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' in message.text)
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ç–∞—Ä–∏—Ñ Lifecell, –¥–ª—è –∫–æ–≥–æ –∑–∞–º–æ–≤–ª—è—î—Ç–µ —Ç–∞—Ä–∏—Ñ?",
                        reply_markup=main)

@dp.message_handler(text=["–î–ª—è —Å—ñ–º'—ó"])
async def cmd_start(message: types.Message):
    tariffs = get_tariffs_family()
    for tariff in tariffs:
        id, name, price, internet, calls, description, link = tariff
        text = f"üì±–¢–∞—Ä–∏—Ñ: {name}\n" \
               f"üí∏–¶—ñ–Ω–∞: {price}\n" \
               f"üåê–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet}\n" \
               f"üìû–î–∑–≤—ñ–Ω–∫–∏: {calls}\n" \
               f"üìé–û–ø–∏—Å: {description}"
        link_kb = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏", url=link)
        link_kb.add(button)
        await message.reply(text, reply_markup=link_kb)

@dp.message_handler(text=["–î–ª—è —Å–µ–±–µ"])
async def cmd_start(message: types.Message):
    await message.reply('–ì–∞—Ä–∞–∑–¥, —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏, —è–∫—ñ –ø–æ—Å–ª—É–≥–∏ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å?', reply_markup=for_me)

@dp.message_handler(text=["–ù–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤"])
async def cmd_start(message: types.Message):
    await message.reply('–ì–∞—Ä–∞–∑–¥, —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏ –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤')
    device = [get_tariff_any()]
    for tariff in device:
        id, name, price, internet, calls, description, link = tariff
        text = f"üì±–¢–∞—Ä–∏—Ñ: {name}\n" \
               f"üí∏–¶—ñ–Ω–∞: {price}\n" \
               f"üåê–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet}\n" \
               f"üìû–î–∑–≤—ñ–Ω–∫–∏: {calls}\n" \
               f"üìé–û–ø–∏—Å: {description}\n"
        link_kb = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏", url=link)
        link_kb.add(button)
        await message.reply(text, reply_markup=link_kb)

@dp.message_handler(text=["–î–∑–≤—ñ–Ω–∫–∏"])
async def cmd_start(message: types.Message):
    await message.reply("–û—Å—å —Ç–∞—Ä–∏—Ñ, —â–æ –ø—ñ–¥—ñ–π–¥–µ –¥–ª—è –≤–∞—Å: ")
    call = [get_tariff_call()]
    for tariff in call:
        id, name, price, internet, calls, description, link = tariff
        text = f"üì±–¢–∞—Ä–∏—Ñ: {name}\n" \
               f"üí∏–¶—ñ–Ω–∞: {price}\n" \
               f"üåê–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet}\n" \
               f"üìû–î–∑–≤—ñ–Ω–∫–∏: {calls}\n" \
               f"üìé–û–ø–∏—Å: {description}\n"
        link_kb = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏", url=link)
        link_kb.add(button)
        await message.reply(text, reply_markup=link_kb)

@dp.message_handler(text=["–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç"])
async def cmd_start(message: types.Message):
    await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –í–∞–º –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É" , reply_markup=internet)

@dp.message_handler(text=["–ë–µ–∑–ª—ñ–º"])
async def cmd_start(message: types.Message):
    await message.reply("–û—Å—å —Ü–µ–π —Ç–∞—Ä–∏—Ñ —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—ñ–π–¥–µ –í–∞–º: ")
    unlim = get_tariffs_unlimited()
    for tariff in unlim:
        id, name, price, internet, calls, description, advant, link = tariff
        text = f"üì±–¢–∞—Ä–∏—Ñ: {name}\n" \
               f"üí∏–¶—ñ–Ω–∞: {price}\n" \
               f"üåê–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet}\n" \
               f"üìû–î–∑–≤—ñ–Ω–∫–∏: {calls}\n" \
               f"üìé–û–ø–∏—Å: {description}\n" \
               f"üìå–ü–µ—Ä–µ–≤–∞–≥–∏: \n {advant}"
        link_kb = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏", url=link)
        link_kb.add(button)
        await message.reply(text, reply_markup=link_kb)

@dp.message_handler(text=["40 –ì–ë","25 –ì–ë", "8 –ì–ë", "7 –ì–ë"])
async def cmd_start(message: types.Message):
    text = message.text
    await message.reply(f"–û—Å—å —Ç–∞—Ä–∏—Ñ–∏ –∑ {text} —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É: ")
    tariff = get_tariff_gb(text)
    if tariff is not None:
        id, name, price, internet, calls, description, link = tariff
        text = f"üì±–¢–∞—Ä–∏—Ñ: {name}\n" \
               f"üí∏–¶—ñ–Ω–∞: {price}\n" \
               f"üåê–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet}\n" \
               f"üìû–î–∑–≤—ñ–Ω–∫–∏: {calls}\n" \
               f"üìé–û–ø–∏—Å: {description}\n"
        link_kb = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏", url=link)
        link_kb.add(button)
        await message.reply(text, reply_markup=link_kb)
    else:
        await message.reply("–¢–∞—Ä–∏—Ñ—ñ–≤ –∑ —Ç–∞–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
